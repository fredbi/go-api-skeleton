// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fredbi/go-api-skeleton/api/pkg/injected"
	"github.com/fredbi/go-api-skeleton/api/pkg/repos"
	"github.com/fredbi/go-trace/log"
	"github.com/go-chi/chi"
	"github.com/jmoiron/sqlx"
	"github.com/spf13/viper"
	"sync"
)

// Ensure, that IfaceMock does implement injected.Iface.
// If this is not the case, regenerate this file with moq.
var _ injected.Iface = &IfaceMock{}

// IfaceMock is a mock implementation of injected.Iface.
//
//	func TestSomethingThatUsesIface(t *testing.T) {
//
//		// make and configure a mocked injected.Iface
//		mockedIface := &IfaceMock{
//			AppFunc: func() chi.Router {
//				panic("mock out the App method")
//			},
//			ConfigFunc: func() *viper.Viper {
//				panic("mock out the Config method")
//			},
//			DBFunc: func() *sqlx.DB {
//				panic("mock out the DB method")
//			},
//			LoggerFunc: func() log.Factory {
//				panic("mock out the Logger method")
//			},
//			ReposFunc: func() repos.Iface {
//				panic("mock out the Repos method")
//			},
//		}
//
//		// use mockedIface in code that requires injected.Iface
//		// and then make assertions.
//
//	}
type IfaceMock struct {
	// AppFunc mocks the App method.
	AppFunc func() chi.Router

	// ConfigFunc mocks the Config method.
	ConfigFunc func() *viper.Viper

	// DBFunc mocks the DB method.
	DBFunc func() *sqlx.DB

	// LoggerFunc mocks the Logger method.
	LoggerFunc func() log.Factory

	// ReposFunc mocks the Repos method.
	ReposFunc func() repos.Iface

	// calls tracks calls to the methods.
	calls struct {
		// App holds details about calls to the App method.
		App []struct {
		}
		// Config holds details about calls to the Config method.
		Config []struct {
		}
		// DB holds details about calls to the DB method.
		DB []struct {
		}
		// Logger holds details about calls to the Logger method.
		Logger []struct {
		}
		// Repos holds details about calls to the Repos method.
		Repos []struct {
		}
	}
	lockApp    sync.RWMutex
	lockConfig sync.RWMutex
	lockDB     sync.RWMutex
	lockLogger sync.RWMutex
	lockRepos  sync.RWMutex
}

// App calls AppFunc.
func (mock *IfaceMock) App() chi.Router {
	if mock.AppFunc == nil {
		panic("IfaceMock.AppFunc: method is nil but Iface.App was just called")
	}
	callInfo := struct {
	}{}
	mock.lockApp.Lock()
	mock.calls.App = append(mock.calls.App, callInfo)
	mock.lockApp.Unlock()
	return mock.AppFunc()
}

// AppCalls gets all the calls that were made to App.
// Check the length with:
//
//	len(mockedIface.AppCalls())
func (mock *IfaceMock) AppCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockApp.RLock()
	calls = mock.calls.App
	mock.lockApp.RUnlock()
	return calls
}

// Config calls ConfigFunc.
func (mock *IfaceMock) Config() *viper.Viper {
	if mock.ConfigFunc == nil {
		panic("IfaceMock.ConfigFunc: method is nil but Iface.Config was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfig.Lock()
	mock.calls.Config = append(mock.calls.Config, callInfo)
	mock.lockConfig.Unlock()
	return mock.ConfigFunc()
}

// ConfigCalls gets all the calls that were made to Config.
// Check the length with:
//
//	len(mockedIface.ConfigCalls())
func (mock *IfaceMock) ConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfig.RLock()
	calls = mock.calls.Config
	mock.lockConfig.RUnlock()
	return calls
}

// DB calls DBFunc.
func (mock *IfaceMock) DB() *sqlx.DB {
	if mock.DBFunc == nil {
		panic("IfaceMock.DBFunc: method is nil but Iface.DB was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDB.Lock()
	mock.calls.DB = append(mock.calls.DB, callInfo)
	mock.lockDB.Unlock()
	return mock.DBFunc()
}

// DBCalls gets all the calls that were made to DB.
// Check the length with:
//
//	len(mockedIface.DBCalls())
func (mock *IfaceMock) DBCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDB.RLock()
	calls = mock.calls.DB
	mock.lockDB.RUnlock()
	return calls
}

// Logger calls LoggerFunc.
func (mock *IfaceMock) Logger() log.Factory {
	if mock.LoggerFunc == nil {
		panic("IfaceMock.LoggerFunc: method is nil but Iface.Logger was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLogger.Lock()
	mock.calls.Logger = append(mock.calls.Logger, callInfo)
	mock.lockLogger.Unlock()
	return mock.LoggerFunc()
}

// LoggerCalls gets all the calls that were made to Logger.
// Check the length with:
//
//	len(mockedIface.LoggerCalls())
func (mock *IfaceMock) LoggerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLogger.RLock()
	calls = mock.calls.Logger
	mock.lockLogger.RUnlock()
	return calls
}

// Repos calls ReposFunc.
func (mock *IfaceMock) Repos() repos.Iface {
	if mock.ReposFunc == nil {
		panic("IfaceMock.ReposFunc: method is nil but Iface.Repos was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRepos.Lock()
	mock.calls.Repos = append(mock.calls.Repos, callInfo)
	mock.lockRepos.Unlock()
	return mock.ReposFunc()
}

// ReposCalls gets all the calls that were made to Repos.
// Check the length with:
//
//	len(mockedIface.ReposCalls())
func (mock *IfaceMock) ReposCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRepos.RLock()
	calls = mock.calls.Repos
	mock.lockRepos.RUnlock()
	return calls
}
